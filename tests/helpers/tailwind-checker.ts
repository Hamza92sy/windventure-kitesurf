import { Page, expect } from '@playwright/test';

export class TailwindChecker {
  constructor(private page: Page) {}

  /**
   * V√©rifie qu'un √©l√©ment avec une classe Tailwind a bien les styles appliqu√©s
   */
  async checkTailwindClass(selector: string, className: string, expectedCSS: { [key: string]: string }) {
    const element = this.page.locator(selector).filter({ hasText: new RegExp(className) }).first();
    
    // V√©rifie que l'√©l√©ment existe
    await expect(element).toBeVisible();
    
    // R√©cup√®re les styles computed
    const styles = await element.evaluate((el) => {
      const computed = window.getComputedStyle(el);
      return {
        backgroundColor: computed.backgroundColor,
        color: computed.color,
        padding: computed.padding,
        margin: computed.margin,
        display: computed.display,
        border: computed.border,
      };
    });
    
    // V√©rifie les styles attendus
    for (const [property, expectedValue] of Object.entries(expectedCSS)) {
      if (styles[property] !== expectedValue) {
        console.warn(`‚ùå ${selector} .${className}: ${property} = ${styles[property]} (attendu: ${expectedValue})`);
      } else {
        console.log(`‚úÖ ${selector} .${className}: ${property} = ${expectedValue}`);
      }
    }
    
    return styles;
  }

  /**
   * V√©rifie que les styles inline n'√©crasent pas Tailwind
   */
  async checkNoInlineStyleOverride(selector: string = 'body') {
    const element = this.page.locator(selector).first();
    const inlineStyle = await element.getAttribute('style');
    
    if (inlineStyle && inlineStyle.length > 0) {
      console.warn(`‚ö†Ô∏è Style inline d√©tect√© sur ${selector}: ${inlineStyle}`);
      
      // V√©rifie si c'est le style probl√©matique connu
      if (inlineStyle.includes('background: #fff') || inlineStyle.includes('color: #000')) {
        throw new Error(`üö® Style inline destructeur d√©tect√© sur ${selector}: ${inlineStyle}`);
      }
    } else {
      console.log(`‚úÖ Pas de style inline sur ${selector}`);
    }
    
    return inlineStyle;
  }

  /**
   * Test complet Tailwind
   */
  async runFullCheck() {
    console.log('üîç === TAILWIND CSS CHECK ===');
    
    // 1. V√©rifie qu'il n'y a pas de style inline destructeur
    await this.checkNoInlineStyleOverride('body');
    
    // 2. Trouve un √©l√©ment avec des classes Tailwind
    const tailwindElement = this.page.locator('[class*="bg-"], [class*="text-"], [class*="p-"]').first();
    
    if (await tailwindElement.count() > 0) {
      const classes = await tailwindElement.getAttribute('class');
      console.log(`üì¶ Classes Tailwind trouv√©es: ${classes}`);
      
      // 3. V√©rifie que les styles sont appliqu√©s
      const bgColor = await tailwindElement.evaluate(el => window.getComputedStyle(el).backgroundColor);
      const textColor = await tailwindElement.evaluate(el => window.getComputedStyle(el).color);
      
      // Si transparent ou blanc par d√©faut, Tailwind ne fonctionne pas
      if (bgColor === 'rgba(0, 0, 0, 0)' || bgColor === 'rgb(255, 255, 255)') {
        console.warn(`‚ö†Ô∏è Background par d√©faut d√©tect√©: ${bgColor}`);
        return false;
      }
      
      console.log(`‚úÖ Styles Tailwind appliqu√©s - bg: ${bgColor}, text: ${textColor}`);
      return true;
    }
    
    console.warn('‚ùå Aucun √©l√©ment Tailwind trouv√©');
    return false;
  }
}