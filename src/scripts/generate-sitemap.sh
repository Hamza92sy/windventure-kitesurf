#!/bin/bash

# üó∫Ô∏è Windventure Sitemap Generator
# G√©n√®re un sitemap dynamique avec next-sitemap

set -e

echo "üó∫Ô∏è G√©n√©ration du sitemap Windventure..."
echo "======================================="

# Configuration
SITE_URL=${SITE_URL:-"https://windventure.fr"}
OUTPUT_DIR=${OUTPUT_DIR:-"public"}

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de v√©rification de next-sitemap
check_next_sitemap() {
    echo -e "\n${BLUE}üì¶ V√âRIFICATION NEXT-SITEMAP${NC}"
    echo "----------------------------"

    if npm list next-sitemap > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ next-sitemap install√©${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  next-sitemap non install√©${NC}"
        echo -n "üì¶ Installation de next-sitemap... "
        npm install next-sitemap --save-dev
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    fi
}

# Fonction de cr√©ation du fichier de configuration
create_sitemap_config() {
    echo -e "\n${BLUE}‚öôÔ∏è  CR√âATION DE LA CONFIGURATION${NC}"
    echo "--------------------------------"

    cat > next-sitemap.config.js << EOF
/** @type {import('next-sitemap').IConfig} */
module.exports = {
  siteUrl: process.env.SITE_URL || '${SITE_URL}',
  generateRobotsTxt: true,
  generateIndexSitemap: true,
  outDir: '${OUTPUT_DIR}',
  exclude: [
    '/api/*',
    '/admin/*',
    '/_next/*',
    '/404',
    '/500',
    '/server-sitemap.xml',
  ],
  robotsTxtOptions: {
    policies: [
      {
        userAgent: '*',
        allow: '/',
        disallow: [
          '/api/',
          '/admin/',
          '/_next/',
          '/private/',
        ],
      },
    ],
    additionalSitemaps: [
      '${SITE_URL}/sitemap.xml',
    ],
  },
  changefreq: 'weekly',
  priority: 0.7,
  sitemapSize: 7000,
  transform: async (config, path) => {
    // Personnalisation des priorit√©s par page
    let priority = config.priority;
    let changefreq = config.changefreq;

    // Pages principales - haute priorit√©
    if (path === '/') {
      priority = 1.0;
      changefreq = 'daily';
    } else if (path === '/packages') {
      priority = 0.9;
      changefreq = 'weekly';
    } else if (path === '/book') {
      priority = 0.9;
      changefreq = 'weekly';
    } else if (path === '/contact') {
      priority = 0.8;
      changefreq = 'monthly';
    } else if (path.startsWith('/packages/')) {
      priority = 0.8;
      changefreq = 'weekly';
    }

    return {
      loc: path,
      changefreq,
      priority,
      lastmod: new Date().toISOString(),
    };
  },
};
EOF

    echo -e "${GREEN}‚úÖ Configuration next-sitemap cr√©√©e${NC}"
}

# Fonction de g√©n√©ration du sitemap
generate_sitemap() {
    echo -e "\n${BLUE}üó∫Ô∏è  G√âN√âRATION DU SITEMAP${NC}"
    echo "---------------------------"

    # V√©rification que le build existe
    if [ ! -d ".next" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Build Next.js manquant, g√©n√©ration...${NC}"
        npm run build
    fi

    # G√©n√©ration du sitemap
    echo -n "üó∫Ô∏è  G√©n√©ration du sitemap... "
    npx next-sitemap
    echo -e "${GREEN}‚úÖ OK${NC}"
}

# Fonction de v√©rification des fichiers g√©n√©r√©s
verify_generated_files() {
    echo -e "\n${BLUE}üîç V√âRIFICATION DES FICHIERS G√âN√âR√âS${NC}"
    echo "----------------------------------------"

    # V√©rification du sitemap.xml
    if [ -f "${OUTPUT_DIR}/sitemap.xml" ]; then
        echo -e "${GREEN}‚úÖ sitemap.xml g√©n√©r√©${NC}"
        echo -n "üìä Nombre d'URLs dans le sitemap: "
        grep -c "<url>" "${OUTPUT_DIR}/sitemap.xml" || echo "0"
    else
        echo -e "${RED}‚ùå sitemap.xml manquant${NC}"
    fi

    # V√©rification du robots.txt
    if [ -f "${OUTPUT_DIR}/robots.txt" ]; then
        echo -e "${GREEN}‚úÖ robots.txt g√©n√©r√©${NC}"
        echo "üìã Contenu du robots.txt:"
        cat "${OUTPUT_DIR}/robots.txt"
    else
        echo -e "${RED}‚ùå robots.txt manquant${NC}"
    fi

    # V√©rification du sitemap-index.xml
    if [ -f "${OUTPUT_DIR}/sitemap-index.xml" ]; then
        echo -e "${GREEN}‚úÖ sitemap-index.xml g√©n√©r√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  sitemap-index.xml manquant (normal si un seul sitemap)${NC}"
    fi
}

# Fonction de validation du sitemap
validate_sitemap() {
    echo -e "\n${BLUE}‚úÖ VALIDATION DU SITEMAP${NC}"
    echo "---------------------------"

    if [ -f "${OUTPUT_DIR}/sitemap.xml" ]; then
        echo -n "üîç Validation XML du sitemap... "
        if xmllint --noout "${OUTPUT_DIR}/sitemap.xml" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ XML valide${NC}"
        else
            echo -e "${RED}‚ùå XML invalide${NC}"
        fi

        # V√©rification des URLs importantes
        echo -n "üîç V√©rification des URLs critiques... "
        if grep -q "<loc>${SITE_URL}/</loc>" "${OUTPUT_DIR}/sitemap.xml" && \
           grep -q "<loc>${SITE_URL}/packages</loc>" "${OUTPUT_DIR}/sitemap.xml" && \
           grep -q "<loc>${SITE_URL}/book</loc>" "${OUTPUT_DIR}/sitemap.xml"; then
            echo -e "${GREEN}‚úÖ URLs critiques pr√©sentes${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Certaines URLs critiques manquantes${NC}"
        fi
    fi
}

# Fonction d'affichage des statistiques
show_statistics() {
    echo -e "\n${BLUE}üìä STATISTIQUES DU SITEMAP${NC}"
    echo "----------------------------"

    if [ -f "${OUTPUT_DIR}/sitemap.xml" ]; then
        echo -n "üìà Nombre total d'URLs: "
        grep -c "<url>" "${OUTPUT_DIR}/sitemap.xml" || echo "0"

        echo -n "üìÖ Derni√®re modification: "
        date -r "${OUTPUT_DIR}/sitemap.xml" "+%Y-%m-%d %H:%M:%S"

        echo -n "üíæ Taille du fichier: "
        ls -lh "${OUTPUT_DIR}/sitemap.xml" | awk '{print $5}'
    fi
}

# Fonction de nettoyage
cleanup() {
    echo -e "\n${BLUE}üßπ NETTOYAGE${NC}"
    echo "---------"

    # Suppression du fichier de configuration temporaire
    if [ -f "next-sitemap.config.js" ]; then
        rm next-sitemap.config.js
        echo -e "${GREEN}‚úÖ Fichier de configuration nettoy√©${NC}"
    fi
}

# Ex√©cution principale
main() {
    # V√©rifications pr√©liminaires
    check_next_sitemap

    # Cr√©ation de la configuration
    create_sitemap_config

    # G√©n√©ration du sitemap
    generate_sitemap

    # V√©rifications post-g√©n√©ration
    verify_generated_files
    validate_sitemap
    show_statistics

    # Nettoyage
    cleanup

    # R√©sum√© final
    echo -e "\n${BLUE}üìä R√âSUM√â DE LA G√âN√âRATION${NC}"
    echo "==============================="
    echo -e "${GREEN}üéâ Sitemap g√©n√©r√© avec succ√®s !${NC}"
    echo -e "${GREEN}‚úÖ Fichiers disponibles dans ${OUTPUT_DIR}/${NC}"
    echo -e "${GREEN}‚úÖ robots.txt configur√©${NC}"
    echo -e "${GREEN}‚úÖ URLs optimis√©es pour le SEO${NC}"

    echo -e "\n${YELLOW}üí° CONSEILS${NC}"
    echo "--------"
    echo "‚Ä¢ V√©rifiez que les fichiers sont bien d√©ploy√©s"
    echo "‚Ä¢ Testez l'accessibilit√© via ${SITE_URL}/sitemap.xml"
    echo "‚Ä¢ Surveillez les performances dans Google Search Console"

    echo -e "\n${GREEN}‚ú® Sitemap pr√™t pour la production !${NC}"
}

# Lancement du script principal
main "$@"
