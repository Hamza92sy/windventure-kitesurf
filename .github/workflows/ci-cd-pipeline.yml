name: CI/CD Pipeline Complet

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 1. Analyse de code et linting
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript Check
        run: npm run type-check

      - name: Security Audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # 2. Tests unitaires et coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Vitest with Coverage
        run: npm run test:unit -- --coverage
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: true
          verbose: true

      - name: Check coverage thresholds
        run: |
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$coverage < 70" | bc -l) )); then
            echo "Coverage is below 70%: $coverage%"
            exit 1
          fi
          echo "Coverage is $coverage%"

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/

  # 3. Tests E2E avec Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run Playwright tests
        run: npx playwright test --browser=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  # 4. Build et analyse de bundle
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Analyze bundle size
        run: |
          npx next-bundle-analyzer@latest
          
      - name: Check build size limits
        run: |
          BUILD_SIZE=$(du -sb .next | cut -f1)
          MAX_SIZE=$((50 * 1024 * 1024)) # 50MB
          if [ $BUILD_SIZE -gt $MAX_SIZE ]; then
            echo "Build size exceeds limit: $BUILD_SIZE bytes > $MAX_SIZE bytes"
            exit 1
          fi
          echo "Build size: $BUILD_SIZE bytes"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next/
          retention-days: 3

  # 5. Performance tests avec Lighthouse
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-analysis
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next/

      - name: Install dependencies
        run: npm ci

      - name: Start server
        run: |
          npm run start &
          npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/activities
            http://localhost:3000/accommodation
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouse.config.js'

      - name: Validate Performance Metrics
        run: |
          node scripts/validate-performance.js

  # 6. Déploiement sur Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build-analysis, performance-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Deploy to Vercel
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Post deployment validation
        run: |
          DEPLOY_URL=$(vercel inspect --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} | grep -oP 'https://[^\s]+')
          echo "Deployed to: $DEPLOY_URL"
          npx wait-on $DEPLOY_URL -t 60000
          curl -f $DEPLOY_URL || exit 1

  # 7. Monitoring post-déploiement
  post-deploy-monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Monitor Sentry for new errors
        run: |
          npm install @sentry/cli
          npx sentry-cli releases finalize ${{ github.sha }}
          npx sentry-cli releases deploys ${{ github.sha }} new -e production

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke

      - name: Check site availability
        run: |
          for i in {1..5}; do
            if curl -f https://windventure.fr; then
              echo "Site is up!"
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done

      - name: Send deployment notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Deployment successful to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create release notes
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            ## Changes in this release
            - Commit: ${{ github.sha }}
            - Author: ${{ github.actor }}
            - Message: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false