name: 🎨 Visual Regression Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Analyse quotidienne de windventure.fr à 6h00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL à analyser (par défaut: windventure.fr)'
        required: false
        default: 'https://windventure.fr'

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  # Job 1: Analyse visuelle automatique
  visual-analysis:
    name: 🔍 Analyse Visuelle Automatique
    runs-on: ubuntu-latest
    
    outputs:
      issues-count: ${{ steps.analysis.outputs.issues-count }}
      critical-issues: ${{ steps.analysis.outputs.critical-issues }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: |
          npm ci
          npm install --save-dev puppeteer

      - name: 🏗️ Build application (si local)
        if: github.event.inputs.target_url == '' || contains(github.event.inputs.target_url, 'localhost')
        run: |
          npm run build
          npm run start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 🔍 Run Visual Analysis
        id: analysis
        run: |
          TARGET_URL="${{ github.event.inputs.target_url || 'https://windventure.fr' }}"
          
          # Si c'est un build local, utiliser localhost
          if [[ -z "${{ github.event.inputs.target_url }}" ]] && [[ "${{ github.event_name }}" != "schedule" ]]; then
            TARGET_URL="http://localhost:3000"
          fi
          
          echo "Analyzing: $TARGET_URL"
          BASE_URL="$TARGET_URL" node scripts/visual-analysis.js || true
          
          # Extraire les métriques du rapport
          if [ -f visual-debug-report.json ]; then
            ISSUES_COUNT=$(cat visual-debug-report.json | jq '.summary.total')
            CRITICAL_ISSUES=$(cat visual-debug-report.json | jq '.summary.critical')
            echo "issues-count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
            echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          else
            echo "issues-count=0" >> $GITHUB_OUTPUT
            echo "critical-issues=0" >> $GITHUB_OUTPUT
          fi

      - name: 📸 Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-screenshots
          path: |
            visual-debug-*.png
            visual-debug-report.json
          retention-days: 7

      - name: 🚨 Comment PR with Visual Issues
        if: github.event_name == 'pull_request' && steps.analysis.outputs.issues-count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const issuesCount = ${{ steps.analysis.outputs.issues-count }};
            const criticalIssues = ${{ steps.analysis.outputs.critical-issues }};
            
            const body = `## 🎨 Analyse Visuelle
            
            📊 **Résultats:**
            - 🔍 Problèmes détectés: ${issuesCount}
            - 🚨 Critiques: ${criticalIssues}
            
            ${criticalIssues > 0 ? '❌ **Des problèmes critiques nécessitent votre attention**' : '✅ Aucun problème critique'}
            
            📸 Consultez les screenshots dans les artifacts de ce build.
            
            <details>
            <summary>🔧 Actions recommandées</summary>
            
            1. Téléchargez les artifacts pour voir les screenshots
            2. Lancez localement: \`npm run debug:visual\`
            3. Appliquez les corrections: \`npm run auto-fix:visual\`
            4. Re-testez et re-committez
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 2: Tests de régression visuelle multi-browsers
  visual-regression:
    name: 📸 Tests Régression Visuelle
    runs-on: ubuntu-latest
    needs: visual-analysis
    if: always()
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        viewport: [desktop, tablet, mobile]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: |
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🏗️ Build application
        run: |
          npm run build
          npm run start &
          sleep 10
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 📸 Run Visual Regression Tests
        run: |
          VIEWPORT=${{ matrix.viewport }} npx playwright test visual-regression --project=${{ matrix.browser }}
        continue-on-error: true

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-results-${{ matrix.browser }}-${{ matrix.viewport }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Job 3: Auto-correction automatique
  auto-fix:
    name: 🔧 Tentative de Correction Automatique
    runs-on: ubuntu-latest
    needs: visual-analysis
    if: needs.visual-analysis.outputs.critical-issues > 0 && github.event_name != 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 📥 Download Analysis Report
        uses: actions/download-artifact@v4
        with:
          name: visual-screenshots

      - name: 🛠️ Run Auto-Fix
        run: |
          node scripts/auto-fix-visual.js

      - name: 📤 Create Fix Pull Request
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🔧 Auto-fix: Corrections visuelles automatiques"
          title: "🤖 Auto-Fix: Problèmes visuels détectés et corrigés"
          body: |
            ## 🔧 Corrections Automatiques Appliquées
            
            Ce PR a été généré automatiquement suite à la détection de ${{ needs.visual-analysis.outputs.critical-issues }} problème(s) critique(s).
            
            ### 🔍 Analyse complète
            - **Problèmes totaux:** ${{ needs.visual-analysis.outputs.issues-count }}
            - **Problèmes critiques:** ${{ needs.visual-analysis.outputs.critical-issues }}
            
            ### ✅ Corrections appliquées
            Les corrections suivantes ont été appliquées automatiquement :
            - 🎨 Configuration Tailwind CSS optimisée
            - 📱 Fixes responsive pour mobile/tablet
            - 🖼️ Composants d'images optimisés avec fallbacks
            - 📐 Corrections des débordements de layout
            - ⚡ Optimisations de performance Next.js
            
            ### 🧪 Tests requis
            - [ ] Vérifier le build : `npm run build`
            - [ ] Tester visuellement sur desktop/mobile
            - [ ] Relancer l'analyse : `npm run debug:visual`
            - [ ] Valider les performances Lighthouse
            
            ### ⚠️ Attention
            - Ce sont des corrections automatiques - vérifiez avant de merger
            - Testez particulièrement sur mobile et les images
            - Les sauvegardes sont dans les fichiers `backup-*`
            
            ---
            🤖 Généré automatiquement par le workflow Visual Regression CI
          branch: auto-fix/visual-issues-${{ github.run_number }}
          delete-branch: true

  # Job 4: Performance & Lighthouse audit
  performance-audit:
    name: ⚡ Audit Performance & Visuel
    runs-on: ubuntu-latest
    needs: visual-analysis
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: |
          npm run build
          npm run start &
          sleep 10

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: 📊 Web Vitals Check
        run: |
          # Installer lighthouse en CLI
          npm install -g lighthouse chrome-launcher
          
          # Lancer lighthouse et extraire les métriques
          lighthouse http://localhost:3000 --output=json --output-path=lighthouse-report.json --chrome-flags="--headless" --quiet
          
          # Analyser les résultats
          node -e "
          const report = require('./lighthouse-report.json');
          const metrics = report.audits;
          
          const fcp = metrics['first-contentful-paint'].numericValue;
          const lcp = metrics['largest-contentful-paint'].numericValue;
          const cls = metrics['cumulative-layout-shift'].numericValue;
          const perfScore = report.categories.performance.score * 100;
          
          console.log('📊 Web Vitals:');
          console.log('Performance Score:', perfScore.toFixed(1) + '%');
          console.log('FCP:', fcp + 'ms (seuil: <2000ms)');
          console.log('LCP:', lcp + 'ms (seuil: <3000ms)');  
          console.log('CLS:', cls.toFixed(3) + ' (seuil: <0.1)');
          
          // Échec si seuils critiques dépassés
          const failures = [];
          if (perfScore < 85) failures.push('Performance Score < 85%');
          if (fcp > 2000) failures.push('FCP > 2s');
          if (lcp > 3000) failures.push('LCP > 3s');
          if (cls > 0.1) failures.push('CLS > 0.1');
          
          if (failures.length > 0) {
            console.log('❌ Échecs:', failures.join(', '));
            process.exit(1);
          } else {
            console.log('✅ Toutes les métriques passent');
          }
          "

      - name: 📊 Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.json

  # Job 5: Notification et intégration Notion
  notify-and-integrate:
    name: 📋 Notifications & Intégration
    runs-on: ubuntu-latest
    needs: [visual-analysis, visual-regression, performance-audit]
    if: always()
    
    steps:
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4

      - name: 📤 Update Notion Database
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
        if: env.NOTION_API_KEY != ''
        run: |
          # Calculer le statut global
          VISUAL_STATUS="✅ OK"
          if [ "${{ needs.visual-analysis.outputs.critical-issues }}" -gt "0" ]; then
            VISUAL_STATUS="❌ Problèmes critiques"
          elif [ "${{ needs.visual-analysis.outputs.issues-count }}" -gt "0" ]; then
            VISUAL_STATUS="⚠️ Problèmes mineurs"
          fi
          
          # Mettre à jour Notion
          curl -X PATCH "https://api.notion.com/v1/pages/${{ secrets.NOTION_PAGE_ID }}" \
            -H "Authorization: Bearer ${{ secrets.NOTION_API_KEY }}" \
            -H "Content-Type: application/json" \
            -H "Notion-Version: 2022-06-28" \
            -d "{
              \"properties\": {
                \"Visual Status\": {
                  \"rich_text\": [{
                    \"text\": { \"content\": \"$VISUAL_STATUS\" }
                  }]
                },
                \"Last Visual Check\": {
                  \"date\": {
                    \"start\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                  }
                },
                \"Issues Count\": {
                  \"number\": ${{ needs.visual-analysis.outputs.issues-count || 0 }}
                },
                \"Critical Issues\": {
                  \"number\": ${{ needs.visual-analysis.outputs.critical-issues || 0 }}
                }
              }
            }"

      - name: 🚨 Slack Notification
        if: failure() || needs.visual-analysis.outputs.critical-issues > 0
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{
                \"text\": \"🚨 Problèmes visuels détectés sur Windventure.fr\",
                \"attachments\": [
                  {
                    \"color\": \"danger\",
                    \"fields\": [
                      {
                        \"title\": \"Repository\",
                        \"value\": \"${{ github.repository }}\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Branch\",
                        \"value\": \"${{ github.ref_name }}\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Problèmes critiques\",
                        \"value\": \"${{ needs.visual-analysis.outputs.critical-issues }}\",
                        \"short\": true
                      },
                      {
                        \"title\": \"Total problèmes\",
                        \"value\": \"${{ needs.visual-analysis.outputs.issues-count }}\",
                        \"short\": true
                      }
                    ],
                    \"actions\": [
                      {
                        \"type\": \"button\",
                        \"text\": \"Voir les screenshots\",
                        \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                      }
                    ]
                  }
                ]
              }"
          fi

      - name: ✅ Success Notification
        if: success() && needs.visual-analysis.outputs.critical-issues == 0
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H 'Content-type: application/json' \
              --data "{
                \"text\": \"✅ Tests visuels Windventure.fr réussis\",
                \"attachments\": [
                  {
                    \"color\": \"good\",
                    \"fields\": [
                      {
                        \"title\": \"Status\",
                        \"value\": \"Tous les tests visuels passent\",
                        \"short\": false
                      }
                    ]
                  }
                ]
              }"
          fi

      - name: 📊 Performance Summary
        run: |
          echo "## 📊 Résumé de l'analyse visuelle" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Problèmes détectés:** ${{ needs.visual-analysis.outputs.issues-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Problèmes critiques:** ${{ needs.visual-analysis.outputs.critical-issues }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL analysée:** ${{ github.event.inputs.target_url || 'https://windventure.fr' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.visual-analysis.outputs.critical-issues }}" -gt "0" ]; then
            echo "❌ **Action requise:** Des problèmes critiques nécessitent votre attention" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Statut:** Aucun problème critique détecté" >> $GITHUB_STEP_SUMMARY
          fi