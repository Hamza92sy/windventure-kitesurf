#!/usr/bin/env node

/**
 * Script de test pour webhook Make.com -> Notion
 * Teste l'int√©gration avec la structure exacte de la base Notion WindVenture
 */

const WEBHOOK_URL = 'https://hook.eu2.make.com/bfncwe5cc93t2g8d22pw1ao60g5v2rcl';

// Donn√©es de test conformes √† la structure Notion
const testData = {
  // Informations client
  client: "Marie Dubois",
  email: "marie.dubois@example.com",
  telephone: "+33 6 12 34 56 78",
  
  // Package et formation
  package: "combined",
  niveau_kitesurf: "Interm√©diaire",
  heures_formation: 12,
  
  // Dates du s√©jour
  date_arrivee: "2025-04-15",
  date_depart: "2025-04-22",
  duree_sejour: 7,
  
  // D√©tails r√©servation
  nb_personnes: 2,
  hebergement: "H√¥tel partenaire",
  services_extra: ["Transfert a√©roport", "Location mat√©riel premium", "Photographe professionnel"],
  
  // Informations compl√©mentaires
  notes_commentaires: "Couple avec niveaux diff√©rents. Mari confirm√©, femme interm√©diaire. V√©g√©tariens. Souhaitons cours s√©par√©s certains jours.",
  source_reservation: "Site web",
  
  // Donn√©es calcul√©es
  prix_total: 2700, // 1350‚Ç¨ x 2 personnes
  statut_reservation: "‚è≥ EN ATTENTE",
  statut_paiement: "En attente",
  date_reservation: new Date().toISOString(),
  
  // M√©tadonn√©es
  timestamp: new Date().toISOString(),
  utm_source: "google",
  utm_medium: "organic",
  utm_campaign: "spring-2025"
};

async function testWebhook() {
  console.log('üöÄ Test du webhook Make.com -> Notion');
  console.log('URL:', WEBHOOK_URL);
  console.log('\nüìä Donn√©es envoy√©es:');
  console.log(JSON.stringify(testData, null, 2));
  
  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });
    
    console.log('\n‚úÖ R√©ponse du webhook:');
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    const responseText = await response.text();
    console.log('Body:', responseText);
    
    if (response.ok) {
      console.log('\nüéâ SUCCESS! Le webhook a accept√© les donn√©es.');
      console.log('\nüìã Prochaines √©tapes:');
      console.log('1. V√©rifiez dans Make.com > Historique que la requ√™te est arriv√©e');
      console.log('2. V√©rifiez dans Notion que la nouvelle entr√©e a √©t√© cr√©√©e');
      console.log('3. V√©rifiez vos emails pour la notification');
      
      return true;
    } else {
      console.error('\n‚ùå ERREUR: Le webhook a rejet√© les donn√©es');
      return false;
    }
  } catch (error) {
    console.error('\n‚ùå ERREUR lors de l\'envoi:', error.message);
    return false;
  }
}

// Tests additionnels avec diff√©rents sc√©narios
async function runAllTests() {
  console.log('========================================');
  console.log('üß™ SUITE DE TESTS WEBHOOK NOTION');
  console.log('========================================\n');
  
  // Test 1: R√©servation standard
  console.log('TEST 1: R√©servation standard');
  await testWebhook();
  
  // Attendre 2 secondes entre les tests
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Test 2: R√©servation minimaliste
  console.log('\n\nTEST 2: R√©servation minimaliste');
  const minimalData = {
    client: "Test Minimal",
    email: "test@example.com",
    telephone: "+33600000000",
    package: "beginner-private",
    date_arrivee: "2025-05-01",
    date_depart: "2025-05-08",
    nb_personnes: 1,
    niveau_kitesurf: "D√©butant",
    hebergement: "D√©j√† r√©serv√©",
    services_extra: [],
    source_reservation: "Site web",
    prix_total: 720,
    duree_sejour: 7,
    heures_formation: 6,
    statut_reservation: "‚è≥ EN ATTENTE",
    statut_paiement: "En attente",
    date_reservation: new Date().toISOString()
  };
  
  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(minimalData)
    });
    
    if (response.ok) {
      console.log('‚úÖ Test minimal r√©ussi');
    } else {
      console.log('‚ùå Test minimal √©chou√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur test minimal:', error.message);
  }
  
  // Attendre 2 secondes
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Test 3: Groupe large
  console.log('\n\nTEST 3: R√©servation groupe');
  const groupData = {
    ...testData,
    client: "Groupe SportAventure",
    nb_personnes: 6,
    prix_total: 8100, // 1350‚Ç¨ x 6
    notes_commentaires: "Groupe d'entreprise pour team building. Niveaux vari√©s.",
    services_extra: ["Transfert a√©roport", "Photographe professionnel", "Repas sur site", "Excursion Dune Blanche"]
  };
  
  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(groupData)
    });
    
    if (response.ok) {
      console.log('‚úÖ Test groupe r√©ussi');
    } else {
      console.log('‚ùå Test groupe √©chou√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur test groupe:', error.message);
  }
  
  console.log('\n========================================');
  console.log('üìä R√âSUM√â DES TESTS');
  console.log('========================================');
  console.log('‚úÖ Tests termin√©s. V√©rifiez:');
  console.log('1. Make.com: 3 ex√©cutions dans l\'historique');
  console.log('2. Notion: 3 nouvelles entr√©es dans la base');
  console.log('3. Emails: 3 notifications re√ßues');
}

// Fonction d'aide pour afficher la structure
function showDataStructure() {
  console.log('\nüìã STRUCTURE DE DONN√âES POUR MAKE.COM:');
  console.log('=====================================\n');
  
  const structure = {
    client: "string - Nom complet du client",
    email: "string - Email valide",
    telephone: "string - T√©l√©phone avec indicatif",
    package: "string - ID du package (beginner-private, semi-private, combined, exploration)",
    date_arrivee: "string - Format YYYY-MM-DD",
    date_depart: "string - Format YYYY-MM-DD",
    duree_sejour: "number - Calcul√© automatiquement",
    nb_personnes: "number - Entre 1 et 8",
    niveau_kitesurf: "string - D√©butant|Initi√©|Interm√©diaire|Confirm√©|Expert",
    hebergement: "string - Type d'h√©bergement",
    services_extra: "array - Liste des services suppl√©mentaires",
    notes_commentaires: "string - Commentaires libres",
    source_reservation: "string - Origine de la r√©servation",
    prix_total: "number - Prix calcul√©",
    heures_formation: "number - Heures selon package",
    statut_reservation: "string - ‚è≥ EN ATTENTE par d√©faut",
    statut_paiement: "string - En attente par d√©faut",
    date_reservation: "string - ISO timestamp"
  };
  
  console.log(JSON.stringify(structure, null, 2));
}

// Ex√©cution
const args = process.argv.slice(2);

if (args.includes('--help')) {
  console.log('Usage: node test-notion-webhook.js [options]');
  console.log('Options:');
  console.log('  --all     Ex√©cuter tous les tests');
  console.log('  --struct  Afficher la structure de donn√©es');
  console.log('  --help    Afficher cette aide');
} else if (args.includes('--struct')) {
  showDataStructure();
} else if (args.includes('--all')) {
  runAllTests();
} else {
  // Test simple par d√©faut
  testWebhook();
}