#!/usr/bin/env node

/**
 * Test avec mapping Notion s√©curis√© pour √©viter les erreurs de validation
 * Utilise les valeurs par d√©faut et formatage correct
 */

const WEBHOOK_URL = 'https://hook.eu2.make.com/bfncwe5cc93t2g8d22pw1ao60g5v2rcl';

function getFutureDate(daysFromNow = 30) {
  const date = new Date();
  date.setDate(date.getDate() + daysFromNow);
  return date.toISOString().split('T')[0];
}

// Donn√©es de test conformes au mapping s√©curis√©
const secureTestData = {
  // Champs obligatoires avec valeurs par d√©faut s√©curis√©es
  name: "Marie Dupont",
  email: "marie.dupont@example.com",
  package: "üîµ SEMI-PRIVATE", // Valeur par d√©faut du mapping
  
  // Dates au bon format
  checkin: getFutureDate(30), // Dans 30 jours
  
  // Number s√©curis√©
  participants: 2,
  
  // Champs optionnels (peuvent √™tre vides)
  phone: "+33612345678",
  notes: "Test mapping s√©curis√© Notion",
  
  // Niveau avec valeur par d√©faut
  level: "üü° INTERM√âDIAIRE",
  
  // Autres champs optionnels
  accommodation: "H√¥tel partenaire",
  services: ["Transfert a√©roport"],
  source: "Site web"
};

// Test avec donn√©es minimales (valeurs par d√©faut)
const minimalTestData = {
  name: "Test Minimal",
  email: "minimal@test.com",
  package: "üîµ SEMI-PRIVATE",
  checkin: getFutureDate(15),
  participants: 1,
  level: "üü° INTERM√âDIAIRE"
};

// Test avec donn√©es manquantes (pour tester ifempty)
const missingDataTest = {
  // name: "", // Volontairement vide pour tester ifempty
  email: "test@empty.com",
  // package: "", // Vide pour tester valeur par d√©faut
  checkin: getFutureDate(45),
  // participants: null, // Vide pour tester parseNumber
  level: "üü¢ D√âBUTANT"
};

async function testSecureMapping(testName, testData) {
  console.log(`\nüß™ ${testName}`);
  console.log('='.repeat(50));
  
  console.log('üìä Donn√©es envoy√©es:');
  console.log(JSON.stringify(testData, null, 2));
  
  console.log('\nüõ°Ô∏è Valeurs attendues dans Notion:');
  console.log(`Client: ${testData.name || "Client R√©servation"}`);
  console.log(`Email: ${testData.email || "noemail@windventure.fr"}`);
  console.log(`Package: ${testData.package || "üîµ SEMI-PRIVATE"}`);
  console.log(`Date Arriv√©e: ${testData.checkin || "2025-06-01"}`);
  console.log(`Participants: ${testData.participants || 1}`);
  console.log(`Niveau: ${testData.level || "üü° INTERM√âDIAIRE"}`);
  console.log(`Status: ‚è≥ EN ATTENTE (fixe)`);
  console.log(`Source: Site web (fixe)`);
  
  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });
    
    const responseText = await response.text();
    
    console.log(`\nüì° R√©ponse webhook: ${response.status} ${response.statusText}`);
    console.log(`üìÑ Body: ${responseText}`);
    
    if (response.ok) {
      console.log('‚úÖ SUCCESS: Webhook accept√©');
      console.log('\nüîç √Ä v√©rifier dans Make.com:');
      console.log('1. History: Ex√©cution avec modules verts');
      console.log('2. Notion: Nouvelle entr√©e cr√©√©e sans erreur');
      console.log('3. V√©rifier que les valeurs par d√©faut sont appliqu√©es');
      return true;
    } else {
      console.log('‚ùå √âCHEC: Webhook rejet√©');
      return false;
    }
  } catch (error) {
    console.error('‚ùå ERREUR:', error.message);
    return false;
  }
}

async function runSecurityTests() {
  console.log('üõ°Ô∏è TESTS DE S√âCURIT√â MAPPING NOTION');
  console.log('=====================================\n');
  
  let successCount = 0;
  let totalTests = 0;
  
  // Test 1: Donn√©es compl√®tes
  totalTests++;
  if (await testSecureMapping('TEST 1: Donn√©es Compl√®tes', secureTestData)) {
    successCount++;
  }
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // Test 2: Donn√©es minimales
  totalTests++;
  if (await testSecureMapping('TEST 2: Donn√©es Minimales', minimalTestData)) {
    successCount++;
  }
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // Test 3: Donn√©es manquantes (test des valeurs par d√©faut)
  totalTests++;
  if (await testSecureMapping('TEST 3: Valeurs Par D√©faut (ifempty)', missingDataTest)) {
    successCount++;
  }
  
  // R√©sultats
  console.log('\nüìä R√âSULTATS FINAUX');
  console.log('==================');
  console.log(`‚úÖ Tests r√©ussis: ${successCount}/${totalTests}`);
  console.log(`üéØ Webhook URL: ${WEBHOOK_URL}`);
  
  console.log('\nüéØ MAPPING S√âCURIS√â VALID√â:');
  console.log('‚úÖ Client: {{ifempty(1.name; "Client R√©servation")}}');
  console.log('‚úÖ Email: {{ifempty(1.email; "noemail@windventure.fr")}}');
  console.log('‚úÖ Package: {{ifempty(1.package; "üîµ SEMI-PRIVATE")}}');
  console.log('‚úÖ Date: {{parseDate(ifempty(1.checkin; "2025-06-01"); "YYYY-MM-DD")}}');
  console.log('‚úÖ Participants: {{parseNumber(ifempty(1.participants; 1))}}');
  console.log('‚úÖ Niveau: {{ifempty(1.level; "üü° INTERM√âDIAIRE")}}');
  
  console.log('\nüîç V√âRIFICATIONS MAKE.COM:');
  console.log('1. History: 3 ex√©cutions avec modules CREATE + UPDATE');
  console.log('2. Notion: 3 nouvelles entr√©es avec valeurs par d√©faut si n√©cessaire');
  console.log('3. Emails: 3 notifications envoy√©es');
  console.log('4. Aucune erreur "Validation failed"');
  
  if (successCount === totalTests) {
    console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
    console.log('Le mapping s√©curis√© fonctionne parfaitement.');
  } else {
    console.log('\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â');
    console.log('V√©rifiez la configuration des modules dans Make.com.');
  }
}

// Test d'un seul cas
async function testSingle(type) {
  switch(type) {
    case 'complete':
      await testSecureMapping('TEST: Donn√©es Compl√®tes', secureTestData);
      break;
    case 'minimal':
      await testSecureMapping('TEST: Donn√©es Minimales', minimalTestData);
      break;
    case 'empty':
      await testSecureMapping('TEST: Valeurs Vides', missingDataTest);
      break;
    default:
      console.log('‚ùå Type de test invalide. Utilisez: complete, minimal, empty');
  }
}

// Menu d'aide
function showHelp() {
  console.log('Usage: node test-notion-secure-mapping.js [options]\n');
  console.log('Options:');
  console.log('  --all        Ex√©cuter tous les tests de s√©curit√©');
  console.log('  --complete   Tester avec donn√©es compl√®tes');
  console.log('  --minimal    Tester avec donn√©es minimales');
  console.log('  --empty      Tester les valeurs par d√©faut (ifempty)');
  console.log('  --help       Afficher cette aide\n');
  console.log('üõ°Ô∏è Tests de validation du mapping Notion s√©curis√©');
  console.log('Objectif: √âviter les erreurs "Validation failed for X parameter(s)"');
}

// Ex√©cution
const args = process.argv.slice(2);

if (args.includes('--help')) {
  showHelp();
} else if (args.includes('--all')) {
  runSecurityTests();
} else if (args.includes('--complete')) {
  testSingle('complete');
} else if (args.includes('--minimal')) {
  testSingle('minimal');
} else if (args.includes('--empty')) {
  testSingle('empty');
} else {
  // Test par d√©faut: donn√©es compl√®tes
  testSingle('complete');
}